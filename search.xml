<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>DateTime null value</title>
      <link href="2020/11/23/datetime-null-value/"/>
      <url>2020/11/23/datetime-null-value/</url>
      
        <content type="html"><![CDATA[<h1 id="NULL-value-for-DateTime"><a href="#NULL-value-for-DateTime" class="headerlink" title="NULL value for DateTime"></a>NULL value for DateTime</h1><p>For normal DateTimes, if you don’t initialize them at all then they will match DateTime.MinValue, because it is a value type rather than a reference type.</p><p>You can also use a nullable DateTime, like this:</p><pre class=" language-CSharp"><code class="language-CSharp">DateTime? MyNullableDate;</code></pre><p>Or longer version:</p><pre class=" language-CSharp"><code class="language-CSharp">Nullable<DateTime> MyNullableDate;</code></pre><p>And, finally, there’s a built in way to reference the default of any type. This returns null for reference types, but for our DateTime example it will return the same as DateTime.MinValue:</p><pre class=" language-CSharp"><code class="language-CSharp">default(DateTime)</code></pre><p>or, in more recent versions of C#,</p><pre class=" language-CSharp"><code class="language-CSharp">default</code></pre><p>And you can check the value with:</p><pre class=" language-CSharp"><code class="language-CSharp">if (dt.HasValue){  // Do something with dt.Value}</code></pre><p>Or you can use it like:</p><pre class=" language-CSharp"><code class="language-CSharp">DateTime dt2 = dt ?? DateTime.MinValue;</code></pre><p>You can read more here:<br><a href="http://msdn.microsoft.com/en-us/library/b3h38hb0.aspx">http://msdn.microsoft.com/en-us/library/b3h38hb0.aspx</a></p>]]></content>
      
      
      <categories>
          
          <category> .Net </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .Net </tag>
            
            <tag> C# </tag>
            
            <tag> null value </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 柯里化</title>
      <link href="2020/11/20/javascript-ke-li-hua/"/>
      <url>2020/11/20/javascript-ke-li-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-柯里化"><a href="#JavaScript-柯里化" class="headerlink" title="JavaScript 柯里化"></a>JavaScript 柯里化</h1><blockquote><p>在《Mostly adequate guide》一书中，这样总结了柯里化: ——只传递给函数一部分参数来调用它，让它返回一个函数去处理剩下的参数。</p></blockquote><h2 id="在-JavaScript-中实现柯里化"><a href="#在-JavaScript-中实现柯里化" class="headerlink" title="在 JavaScript 中实现柯里化"></a>在 JavaScript 中实现柯里化</h2><p>我们先写一个实现加法的函数 add</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> add <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">}</span></code></pre><p>现在我们直接实现一个被柯里化的 add 函数，该函数名为 curriedAdd，则根据上面的定义，curriedAdd 需要满足以下条件：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">curriedAdd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">4</span><span class="token comment" spellcheck="true">// true</span><span class="token keyword">var</span> increment <span class="token operator">=</span> <span class="token function">curriedAdd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">3</span><span class="token comment" spellcheck="true">// true</span><span class="token keyword">var</span> addTen <span class="token operator">=</span> <span class="token function">curriedAdd</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token function">addTen</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">12</span><span class="token comment" spellcheck="true">// true</span></code></pre><p>满足以上条件的 curriedAdd 的函数可以用以下代码段实现：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> curriedAdd <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> add <span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>当然以上实现是有一些问题的：它并不通用，并且我们并不想通过重新编码函数本身的方式来实现 Currying 化。</p><p>但是这个 curriedAdd 的实现表明了实现 Currying 的一个基础 —— Currying 延迟求值的特性需要用到 JavaScript 中的作用域——说得更通俗一些，我们需要使用作用域来保存上一次传进来的参数。</p><p>对 curriedAdd 进行抽象，可能会得到如下函数 currying ：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> currying <span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token operator">...</span>args1<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token operator">...</span>args2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args1<span class="token punctuation">,</span> <span class="token operator">...</span>args2<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> increment <span class="token operator">=</span> <span class="token function">currying</span><span class="token punctuation">(</span>add<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">3</span><span class="token comment" spellcheck="true">// true</span><span class="token keyword">var</span> addTen <span class="token operator">=</span> <span class="token function">currying</span><span class="token punctuation">(</span>add<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token function">addTen</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">12</span><span class="token comment" spellcheck="true">// true</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> 柯里化 </tag>
            
            <tag> Currying </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改Commit Message</title>
      <link href="2020/11/17/xiu-gai-commit-message/"/>
      <url>2020/11/17/xiu-gai-commit-message/</url>
      
        <content type="html"><![CDATA[<h1 id="修改Commit-Message"><a href="#修改Commit-Message" class="headerlink" title="修改Commit Message"></a>修改Commit Message</h1><h2 id="修改上一条提交的-commit-message"><a href="#修改上一条提交的-commit-message" class="headerlink" title="修改上一条提交的 commit message"></a>修改上一条提交的 commit message</h2><pre><code>git commit --ammend</code></pre><h2 id="修改之前提交的-commit-message"><a href="#修改之前提交的-commit-message" class="headerlink" title="修改之前提交的 commit message"></a>修改之前提交的 commit message</h2><p>首先，我们需要使用 <code>git rebase -i</code>, <code>git rebase -i</code> 提供一个参数，指明你想要修改的提交的父提交（-i 是–interactive的缩写）</p><p>例如：修改最近三次提交，事实上所指的是四次提交之前，即你想修改的提交的父提交</p><pre><code>git rebase -i HEAD~3</code></pre><p>接着会显示如下界面</p><pre><code>pick ef3f7de158 refs #16605[Fix]Not all approver is shownpick e0e5e8f595 refs #17605 change goalesce field to user idpick 3e0cfc1536 refs #17605 change user id to immutable and required_true_can_update# Rebase 9e993debaf..3e0cfc1536 onto 9e993debaf (3 commands)## Commands:# p, pick &lt;commit&gt; = use commit# r, reword &lt;commit&gt; = use commit, but edit the commit message# e, edit &lt;commit&gt; = use commit, but stop for amending</code></pre><p>选择你要修改的那一条commit，把 pick 改为 edit，然后保存退出</p><p>接着，就可以修改选定commit的commit message了</p><pre><code>git commit --ammend</code></pre><p>修改好之后，运行 <code>git rebase --continue</code></p><p>然后，就没有然后了~~</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Complete Guide to Binary Tree</title>
      <link href="2020/11/08/complete-guide-to-binary-tree/"/>
      <url>2020/11/08/complete-guide-to-binary-tree/</url>
      
        <content type="html"><![CDATA[<h1 id="二叉树完全指南"><a href="#二叉树完全指南" class="headerlink" title="二叉树完全指南"></a>二叉树完全指南</h1><h2 id="构造二叉树"><a href="#构造二叉树" class="headerlink" title="构造二叉树"></a>构造二叉树</h2><h3 id="二叉树节点类"><a href="#二叉树节点类" class="headerlink" title="二叉树节点类"></a>二叉树节点类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> val<span class="token punctuation">;</span>  TreeNode left<span class="token punctuation">;</span>  TreeNode right<span class="token punctuation">;</span>  <span class="token function">TreeNode</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token function">TreeNode</span> <span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">,</span> TreeNode left<span class="token punctuation">,</span> TreeNode right<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="构造二叉树-1"><a href="#构造二叉树-1" class="headerlink" title="构造二叉树"></a>构造二叉树</h3><blockquote><p>利用完全二叉树数组构造二叉树</p></blockquote><pre class=" language-java"><code class="language-java">TreeNode <span class="token function">createTreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> __data<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// -1 here means null</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">></span> __data<span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> __data<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> null<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  TreeNode root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>__data<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">createTreeNode</span><span class="token punctuation">(</span>__data<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">createTreeNode</span><span class="token punctuation">(</span>__data<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> start <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="二叉树遍历"><a href="#二叉树遍历" class="headerlink" title="二叉树遍历"></a>二叉树遍历</h2><h3 id="常用的三种遍历方式"><a href="#常用的三种遍历方式" class="headerlink" title="常用的三种遍历方式"></a>常用的三种遍历方式</h3><ol><li>前序遍历 (根左右) - Pre-order traversal (Root Left Right)</li><li>中序遍历 (左根右) - In-order traversal (Left Root Right)</li><li>后序遍历 (左右根) - Post-order traversal (Left Right Root)</li></ol><h4 id="递归方法-Recursive-Approach"><a href="#递归方法-Recursive-Approach" class="headerlink" title="递归方法 - Recursive Approach"></a>递归方法 - Recursive Approach</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>    result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Pre-order</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// result.add(root.val);// In-order</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>`    <span class="token comment" spellcheck="true">// result.add(root.val);// Post-order</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="非递归方法-Iterative-Approach"><a href="#非递归方法-Iterative-Approach" class="headerlink" title="非递归方法 - Iterative Approach"></a>非递归方法 - Iterative Approach</h4><h5 id="前序遍历-中序遍历"><a href="#前序遍历-中序遍历" class="headerlink" title="前序遍历 + 中序遍历"></a>前序遍历 + 中序遍历</h5><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">traverse</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Pre-order and In-order</span>  Stack<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> sk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  TreeNode node <span class="token operator">=</span> root<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>sk<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> node <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      sk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>      result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Pre-order</span>      node <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sk<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      node <span class="token operator">=</span> sk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// result.add(node.val);//In-order</span>      node <span class="token operator">=</span> node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h5><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">traverse</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Pre-order and In-order</span>  Stack<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> sk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  TreeNode node <span class="token operator">=</span> root<span class="token punctuation">;</span>  TreeNode lastVisit <span class="token operator">=</span> root<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>sk<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> node <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      sk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>      node <span class="token operator">=</span> node<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    node <span class="token operator">=</span> sk<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">==</span> null <span class="token operator">||</span> node<span class="token punctuation">.</span>right <span class="token operator">==</span> lastVisit<span class="token punctuation">)</span> <span class="token punctuation">{</span>      result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>      sk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      node <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      node <span class="token operator">=</span> node<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="反转二叉树"><a href="#反转二叉树" class="headerlink" title="反转二叉树"></a>反转二叉树</h2><p>原二叉树</p><pre><code>     4   /   \  2     7 / \   / \1   3 6   9</code></pre><p>反转后的二叉树</p><pre><code>     4   /   \  7     2 / \   / \9   6 3   1</code></pre><h3 id="递归思路："><a href="#递归思路：" class="headerlink" title="递归思路："></a>递归思路：</h3><ol><li>判断根是否为空，为空直接返回根，否则继续</li><li>递归反转根子树</li></ol><pre class=" language-java"><code class="language-java">TreeNode <span class="token function">invertNode</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> root<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>  TreeNode left <span class="token operator">=</span> root<span class="token punctuation">.</span>left<span class="token punctuation">;</span>  root<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">invertNode</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>  root<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">invertNode</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="非递归思路："><a href="#非递归思路：" class="headerlink" title="非递归思路："></a>非递归思路：</h3><ol><li>判断根是否为空，根为空直接返回根，否则继续</li><li>交换根节点的左右子节点</li><li>交换第二层的左右子树</li><li>重复下去，直到最后一个节点</li></ol><pre class=" language-java"><code class="language-java">TreeNode <span class="token function">invertNode</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>null <span class="token operator">==</span> root<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>  Queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>TreeNode<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>queue <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    TreeNode current <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TreeNode __left <span class="token operator">=</span> current<span class="token punctuation">.</span>left<span class="token punctuation">;</span>    current<span class="token punctuation">.</span>left <span class="token operator">=</span> current<span class="token punctuation">.</span>right<span class="token punctuation">;</span>    current<span class="token punctuation">.</span>right <span class="token operator">=</span> __left<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span><span class="token operator">=</span> current<span class="token punctuation">.</span>left<span class="token punctuation">)</span> <span class="token punctuation">{</span>      queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>null <span class="token operator">!=</span><span class="token operator">=</span> current<span class="token punctuation">.</span>right<span class="token punctuation">)</span> <span class="token punctuation">{</span>      queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>current<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Interview </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Binary Tree </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Data Structure </tag>
            
            <tag> Interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/11/08/hello-world/"/>
      <url>2020/11/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
